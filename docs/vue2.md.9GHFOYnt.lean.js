import{_ as s,o as i,c as a,R as n}from"./chunks/framework.T7A4sj_c.js";const c=JSON.parse('{"title":"vue2","description":"","frontmatter":{},"headers":[],"relativePath":"vue2.md","filePath":"vue2.md"}'),l={name:"vue2.md"},e=n(`<h1 id="vue2" tabindex="-1">vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;vue2&quot;">​</a></h1><h2 id="_0-原理解读" tabindex="-1">0. 原理解读 <a class="header-anchor" href="#_0-原理解读" aria-label="Permalink to &quot;0. 原理解读&quot;">​</a></h2><h3 id="defineproperty-get-set" tabindex="-1">defineProperty/get/set <a class="header-anchor" href="#defineproperty-get-set" aria-label="Permalink to &quot;defineProperty/get/set&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Object.defineProperty(obj, &#39;foo&#39;, {configurable: true, writable: true, enumable: true})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initalValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj[key];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, key, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initalValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                initalValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="依赖追踪-订阅者模式" tabindex="-1">依赖追踪（订阅者模式） <a class="header-anchor" href="#依赖追踪-订阅者模式" aria-label="Permalink to &quot;依赖追踪（订阅者模式）&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.Dep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Class Dep {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.subscribers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    depend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 依赖收集</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activeUpdate){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.subscribers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activeUpdate)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 通知订阅者执行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.subscribers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activeUpdate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> autorun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // activeUpdate本质记录正在执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wrappedUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        activeUpdate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wrappedUpdate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        activeUpdate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wrappedUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autorun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dep.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">depend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 首先对象通过defineproperty开启监控</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obeserve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autorun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.count)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span></code></pre></div><h2 id="说一下vue2的生命周期" tabindex="-1">说一下vue2的生命周期？ <a class="header-anchor" href="#说一下vue2的生命周期" aria-label="Permalink to &quot;说一下vue2的生命周期？&quot;">​</a></h2><ol><li>创建： <ul><li>beforecreate: 实例创建前, 此阶段的data、methods、computed、watch的数据和方法不能被访问</li><li>created: 实例创建完成后, 此阶段完成数据监听，可以使用数据、更改数据。无法与Dom进行交互，想要的话可以通过nextTick来访问。</li></ul></li><li>挂载 <ul><li>beforeMount: 页面渲染前, 此阶段虚拟Dom已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发updated。</li><li>mounted: 页面渲染完成后, 此阶段真实Dom渲染完毕，数据完成双向绑定，可以访问到Dom节点，使用$refs属性对Dom进行操作。</li></ul></li><li>更新 <ul><li>beforeUpdate: 响应式数据更新前, 此阶段更改数据，不会造成页面重新渲染。</li><li>updated: 响应式数据更新完成后, 避免在此阶段更改数据，因为这可能会导致无限循环的更新。</li></ul></li><li>销毁 <ul><li>beforeDestroy: 实例销毁前, 我们可以在这时进行善后收尾工作，比如清除定时器、解除绑定事件</li><li>destroyed: 实例销毁完成后</li></ul></li><li>缓存 <ul><li>activited: <code>keep-alive</code>专属，组件被激活时调用</li><li>deactivited: keep-alive专属，组件被销毁时调用</li></ul></li></ol><h3 id="异步请求放在created还是mounted" tabindex="-1">异步请求放在created还是mounted <a class="header-anchor" href="#异步请求放在created还是mounted" aria-label="Permalink to &quot;异步请求放在created还是mounted&quot;">​</a></h3><p>首先明确的一个前提是：请求是异步的。</p><p>在Created生命周期里Data才生成，而请求返回的数据需要挂载在data上，所以Created里是可以初始化请求的，但是 Created 的这时候DOM还没有初始化；</p><p>Mounted生命周期里DOM才初始化渲染完成</p><p>如果我们的请求不需要获取/借助/依赖/改变DOM，这时请求可以放在Created</p><p>反之则可以放在Mounted里</p><h3 id="父子组件生命周期执行顺序" tabindex="-1">父子组件生命周期执行顺序 <a class="header-anchor" href="#父子组件生命周期执行顺序" aria-label="Permalink to &quot;父子组件生命周期执行顺序&quot;">​</a></h3><p>组件渲染的顺序是先父后子，渲染完成的顺序是先子后父</p><p>组件更新的顺序是先父后子，更新完成的顺序是先子后父</p><p>组件销毁的顺序是先父后子，销毁完成的顺序是先子后父</p><h2 id="_1-什么是vue以及vue的特点" tabindex="-1">1. 什么是Vue以及Vue的特点 <a class="header-anchor" href="#_1-什么是vue以及vue的特点" aria-label="Permalink to &quot;1. 什么是Vue以及Vue的特点&quot;">​</a></h2><p>vue是一套用于构建用户界面的渐进式（自底向上逐层应用）js框架</p><ol><li>组件化开发</li><li>无需操作DOM</li><li>使用虚拟DOM和diff算法复用DOM节点</li></ol><h2 id="_2-spa及其优缺点" tabindex="-1">2. SPA及其优缺点 <a class="header-anchor" href="#_2-spa及其优缺点" aria-label="Permalink to &quot;2. SPA及其优缺点&quot;">​</a></h2><p>SPA:signal page application，单一页面应用。</p><p>一旦页面加载完成，不会因为用户在浏览器上的操作而进行<code>跳转</code>、<code>刷新</code>，取而代之的是利用<code>路由机制实现的HTML内容的变换</code>、UI和用户的交互，<code>避免</code>页面的<code>重新加载</code>。</p><p>数据需要通过ajax请求获取。</p><p>优点：</p><ol><li>避免不必要的跳转和重复渲染，提高了用户的体验，减轻了服务器的压力。</li><li><code>前后端分离</code>，使架构更加清晰。</li></ol><p>缺点：</p><ol><li>初次加载耗时长（可以通过<code>按需加载</code>来避免）。</li><li>浏览器的前进后退不可以使用，要自己建立堆栈来进行页面切换。</li><li>SEO难度大。因为就一个页面。</li></ol><h2 id="_2-v-if和v-show的区别" tabindex="-1">2. v-if和v-show的区别 <a class="header-anchor" href="#_2-v-if和v-show的区别" aria-label="Permalink to &quot;2. v-if和v-show的区别&quot;">​</a></h2><p>v-if是真正的条件渲染，<code>不停地的进行销毁和重建</code>，但若初始条件为假时，就什么也不做。</p><p>v-show无论初始渲染条件是否为真，<code>都进行渲染</code>，只是使用“display”属性来控制是否在页面上显示</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Generally speaking, v-if has higher toggle costs while v-show has higher initial render costs. So prefer v-show if you need to toggle something very often, and prefer v-if if the condition is unlikely to change at runtime.</p></div><h2 id="_3-class-和-style如何动态绑定" tabindex="-1">3. <a href="https://vuejs.org/guide/essentials/class-and-style.html" target="_blank" rel="noreferrer">class 和 style如何动态绑定</a> <a class="header-anchor" href="#_3-class-和-style如何动态绑定" aria-label="Permalink to &quot;3. [class 和 style如何动态绑定](https://vuejs.org/guide/essentials/class-and-style.html)&quot;">​</a></h2><p>都可以通过对象和数组来绑定。</p><h2 id="_4-怎样理解vue的单项数据流" tabindex="-1">4. 怎样理解Vue的单项数据流 <a class="header-anchor" href="#_4-怎样理解vue的单项数据流" aria-label="Permalink to &quot;4. 怎样理解Vue的单项数据流&quot;">​</a></h2><p>父级的prop的更新会向下流动到子级的prop里，但是反过来不可以， 若想反过来，只能通过<code>$emit</code>派发一个自定义事件，父组件接到后由父组件修改</p><h2 id="_5-v-for中key的作用" tabindex="-1">5. v-for中key的作用？ <a class="header-anchor" href="#_5-v-for中key的作用" aria-label="Permalink to &quot;5. v-for中key的作用？&quot;">​</a></h2><p>key代表的是唯一，作用是更高效的更新虚拟dom，diff算法时便于区分新旧虚拟dom，新旧虚拟dom的key相同时不会重新渲染，提高性能</p><p>为何不推荐index作为key值：当以数组下标index作为key值时，当其中一个元素发生了变化(增删改查)，就有能导致所有的元素的key值发生改变，导致更新dom时浪费性能</p><h2 id="说一下组件通信有哪些方式" tabindex="-1">说一下组件通信有哪些方式？ <a class="header-anchor" href="#说一下组件通信有哪些方式" aria-label="Permalink to &quot;说一下组件通信有哪些方式？&quot;">​</a></h2><ol><li>父传子 <ul><li>自定义属性 + props：在父组件中，给子组件绑定一个自定义属性，在子组件中，通过props进行接收</li><li>$parent：直接访问父组件实例的属性和方法</li><li>$attrs：在父组件中，给子组件绑定一个自定义属性，在子组件中，通过$attrs进行接收【与props不能共存】</li><li>插槽</li></ul></li><li>子传父 <ul><li>$emit + 自定义事件：在父组件中，给子组件绑定一个自定义事件，绑定事件的值为接收参数的函数，在子组件中，通过$emit发送数据</li><li>$refs：直接访问子组件实例的属性和方法</li><li>$children：直接访问子组件实例的属性和方法【返回数组，必须遍历赋值后才能渲染】</li></ul></li><li>祖传孙/孙传祖 <ul><li>provide函数传，inject数组收</li></ul></li><li>兄弟间 <ul><li><a href="https://stackoverflow.com/questions/68549222/emit-data-with-eventbus" target="_blank" rel="noreferrer">$bus 全局事件总线：给vue原型添加一个vue实例，用this.$bus.$emit发送，用this.$bus.$on接收</a></li></ul></li><li>vuex</li><li>路由传参 <ul><li>params传参（地址栏不显示参数）</li><li>query传参（地址栏显示参数</li></ul></li></ol><h2 id="watch和computed的区别" tabindex="-1">watch和computed的区别 <a class="header-anchor" href="#watch和computed的区别" aria-label="Permalink to &quot;watch和computed的区别&quot;">​</a></h2><p>computed计算属性：</p><ul><li>如果一个数据需要经过复杂计算就用computed</li><li>支持缓存，只有依赖数据发生改变时，才会重新进行计算</li><li>不支持异步，当计算属性内有异步操作时，无法监听到数据的变化。原因：定义的函数接收return的结果，return属于同步执行的，是没办法拿到异步请求结果的</li><li>计算属性只能取不能存，即不能对计算属性直接赋值。如需要存，要给计算属性手动添加setter</li></ul><p>watch监听器</p><ul><li>如果一个数据需要被监听并且对数据做一些异步操作就用watch</li><li>不支持缓存，数据变化会直接触发相应的操作</li></ul><h2 id="说一下为什么data是一个函数" tabindex="-1">说一下为什么data是一个函数？ <a class="header-anchor" href="#说一下为什么data是一个函数" aria-label="Permalink to &quot;说一下为什么data是一个函数？&quot;">​</a></h2><p>data必须是函数，是为了保证不同组件的<code>独立性</code>和<code>可复用性</code>，防止不同组件实例间data的引用关系，避免变量污染</p><h2 id="说一下对keep-alive的理解" tabindex="-1">说一下对keep-alive的理解？ <a class="header-anchor" href="#说一下对keep-alive的理解" aria-label="Permalink to &quot;说一下对keep-alive的理解？&quot;">​</a></h2><p>缓存组件，减少请求次数, 需要缓存用户数据类似表单</p><p>根据条件缓存页面的方式：</p><ul><li><p>:include=&quot;[&#39;组件name&#39;]&quot; 指定想要缓存的组件,其他组件不缓存</p></li><li><p>:exclude=&quot;[&#39;组件name&#39;]&quot; 指定不想要缓存的组件,其他组件缓存</p></li><li><p>利用路由的元属性meta，配合v-if动态判断</p></li></ul><p>两个钩子函数：</p><ul><li><p>activated()：进入这个缓存组件时触发</p></li><li><p>deactivated()：离开这个缓存组件时触发</p></li></ul><h2 id="说一下对mvvm的理解" tabindex="-1">说一下对MVVM的理解？ <a class="header-anchor" href="#说一下对mvvm的理解" aria-label="Permalink to &quot;说一下对MVVM的理解？&quot;">​</a></h2><p>M是model，指的是数据层，即data，V是view，指的是视图层，即template，VM是viewModel，指的是视图模型，即vue实例，是连接view和model的桥梁。数据和视图不能直接通信，必须经过VM实现通信。</p><h2 id="说一下vue2的响应式原理" tabindex="-1">说一下vue2的响应式原理？ <a class="header-anchor" href="#说一下vue2的响应式原理" aria-label="Permalink to &quot;说一下vue2的响应式原理？&quot;">​</a></h2><p>vue2采用<code>数据代理+数据劫持+发布订阅</code>模式的方法。</p><p>在初始化vue实例时，会把data对象和data对象的属性都添加到<code>vm对象</code>中，通过<code>object.defineProperty()</code>进行数据代理，用vm对象的属性来<code>代理data</code>对象的属性，</p><p>并在<code>Observer</code>类中<code>递归遍历data</code>对象，对data对象中的每个属性都进行<code>数据劫持</code>，都指定一个<code>getter、setter</code>。</p><p>例外的，对于数组，不能通过object.defineProperty()进行数据代理，因为监听的数组下标变化时会出现数据错乱问题，所以数组是调用<code>数组重写的原生方法</code>来实现响应式。</p><p>当通过vm对象修改data对象中的属性时，会触发data属性的<code>setter</code>方法，然后触发它<code>Dep实例的notify</code>方法进行依赖分发，通知所有依赖的<code>Watcher</code>实例执行内部回调函数。</p><p>最后会触发<code>renderWatcher</code>回调，会重新执行<code>render函数</code>，重新<code>对比新旧虚拟DOM</code>，<code>重新渲染</code>页面。</p><p>【Watcher回调是异步任务，它的执行会遵循事件循环机制，且重复的Watcher回调不会放到任务队列中，所以多次重复数据更新时，只会重新渲染一次页面】。</p><p>当通过vm对象读取data对象中的属性时，会触发data属性的getter方法，然后触发它Dep实例的depend方法进行依赖收集。</p><p>当data对象中数组元素发生变化时，会调用数组重写的原生方法，然后触发它Dep实例的notify方法进行依赖分发，通知所有依赖的Watcher实例执行内部回调函数。</p><p>最后会触发renderWatcher回调，会重新执行render函数，重新对比新旧虚拟DOM，重新渲染页面。</p><p>当读取data对象中数组元素时，会触发数组的getter方法，然后触发它Dep实例的depend方法进行依赖收集。</p><h2 id="说一下v-model数据双向绑定原理" tabindex="-1">说一下v-model数据双向绑定原理？ <a class="header-anchor" href="#说一下v-model数据双向绑定原理" aria-label="Permalink to &quot;说一下v-model数据双向绑定原理？&quot;">​</a></h2><p>是一个语法糖，做了两件事</p><ul><li><p>v-bind绑定value，更新数据层</p></li><li><p>v-on给元素绑定input事件，监听输入框中的内容，当发生改变时来执行一些事情，并更新视图层</p></li></ul><h2 id="说一下-set的作用和原理" tabindex="-1">说一下$set的作用和原理 <a class="header-anchor" href="#说一下-set的作用和原理" aria-label="Permalink to &quot;说一下$set的作用和原理&quot;">​</a></h2><ol><li>对象： <ul><li>响应式原理：通过触发setter实现更新</li><li>对象中后追加的属性、删除已有属性，Vue默认不做响应式处理</li><li>解决：this.$set()</li></ul></li><li>数组： <ul><li>响应式原理：调用重写的原生方法实现更新</li><li>数组中修改某下标的元素、更新length，Vue默认不做响应式处理</li><li>解决：this.$set()、使用原生API：push、pop、shift、unshift、splice、sort、reverse</li></ul></li></ol><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h3><p>如果目标是数组，直接使用数组的splice方法通知实现更新</p><p>如果目标是对象，先给对象属性用数据代理添加getter、setter，再通过触发setter通知实现更新</p><h2 id="说一下nexttick的使用场景和原理" tabindex="-1">说一下nextTick的使用场景和原理？ <a class="header-anchor" href="#说一下nexttick的使用场景和原理" aria-label="Permalink to &quot;说一下nextTick的使用场景和原理？&quot;">​</a></h2><p>等待DOM更新后，再执行内部传入的回调函数</p><ol><li>使用场景： <ul><li>created中想要获取DOM</li><li>响应式数据变化后获取DOM更新后的状态，如 获取列表更新后的高度</li></ul></li><li>原理 把nextTick回调方法放在renderWatcher回调之后执行，这样就能拿到更新后的DOM</li></ol><h2 id="说一下对单向数据流的理解" tabindex="-1">说一下对单向数据流的理解 <a class="header-anchor" href="#说一下对单向数据流的理解" aria-label="Permalink to &quot;说一下对单向数据流的理解&quot;">​</a></h2><ul><li>概念：父级给子组件是啥，子组件可以用，也可以不用，但是不能修改【单向数据流针对于组件通信】</li><li>作用：保证了数据的可控性，方便预测和调试</li><li>注意：Vue中的单向数据流是针对基本数据类型，而引用类型是对数据地址的引入，子组件修改数据，父组件能接收到数据的更改</li><li>应用：父子传参：子组件不能直接修改父组件的数据，要么通过props从父组件传递过来，要么通过emit在父组件中修改</li></ul><h2 id="vue异步组件怎么加载的" tabindex="-1">vue异步组件怎么加载的 <a class="header-anchor" href="#vue异步组件怎么加载的" aria-label="Permalink to &quot;vue异步组件怎么加载的&quot;">​</a></h2><p>Vue中的异步组件可以通过两种方式进行加载：使用<code>工厂函数</code>或使用<code>import函数</code>。</p><ol><li>使用<code>工厂函数</code>： 在<code>Vue 2</code>中，可以使用<code>工厂函数来定义异步组件</code>。工厂函数返回一个Promise对象，该Promise对象在解析时会动态地加载组件。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AsyncComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;div&gt;This is an async component.&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   });</span></span></code></pre></div><p>在上述示例中，定义了一个名为 AsyncComponent 的异步组件。在工厂函数内部，通过setTimeout模拟一个异步操作，2秒后通过resolve返回组件的定义。</p><ol start="2"><li>使用<code>import函数</code>： 在<code>Vue 2.4及以上版本和Vue 3</code>中，可以使用import函数来定义异步组件。import函数返回一个Promise对象，在解析时会动态地加载组件。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AsyncComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./AsyncComponent.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>在上述示例中，通过import函数异步地加载名为 AsyncComponent 的组件。在import函数中指定组件的路径，Vue会自动处理异步加载并渲染组件。 无论是使用工厂函数还是import函数，Vue都会在需要时自动地异步加载组件，从而提高应用的性能和加载速度。异步组件在需要时才会被加载和渲染，可以减少初始加载时的资源负担，提高用户体验。</p><h2 id="vue中权限是怎么设置的" tabindex="-1">vue中权限是怎么设置的？ <a class="header-anchor" href="#vue中权限是怎么设置的" aria-label="Permalink to &quot;vue中权限是怎么设置的？&quot;">​</a></h2><p>在Vue中设置权限可以通过以下几种方式：</p><ol><li><code>路由权限控制</code>：在Vue Router中可以通过路由元信息（meta）来定义路由的权限要求。您可以在路由配置中为每个路由添加一个<code>meta</code>字段，并将权限信息存储在其中。然后，在全局前置守卫（<code>beforeEach</code>）中，可以根据用户的权限来判断是否允许访问该路由。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 路由配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       component: Admin,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       meta: { requiresAuth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要登录权限</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 全局前置守卫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (to.meta.requiresAuth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAuthenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 没有权限，跳转到登录页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 有权限，继续导航</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   });</span></span></code></pre></div><ol start="2"><li><code>组件级权限控制</code>：在组件中可以根据用户的权限来决定是否显示或执行特定的操作。您可以在组件中使用条件语句或计算属性来判断用户的权限，并根据权限来渲染不同的内容或执行不同的逻辑。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hasPermission(&#39;create&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Create&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hasPermission(&#39;edit&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Edit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hasPermission(&#39;delete&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Delete&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   export default {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       hasPermission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">permission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 根据用户权限判断是否有权限</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.userPermissions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(permission);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="3"><li><code>API权限控制</code>: 在与后端交互的过程中，可以根据后端返回的用户权限信息来控制前端的行为。例如，在获取数据或提交数据时，可以根据用户的权限来决定是否允许进行相应的操作。 这些方法可以根据您的具体需求和项目结构来选择使用。根据您的权限设置，您可以在路由层面、组件层面或者与后端交互的层面来进行权限控制</li></ol><h2 id="vue首页加载慢怎么解决" tabindex="-1">vue首页加载慢怎么解决 <a class="header-anchor" href="#vue首页加载慢怎么解决" aria-label="Permalink to &quot;vue首页加载慢怎么解决&quot;">​</a></h2><p>Vue.js 是一个用于构建用户界面的 JavaScript 框架，它本身并不会直接导致首页加载缓慢。首页加载缓慢可能有多种原因，以下是一些常见的解决方法：</p><ul><li><code>路由懒加载</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/chinaWine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chinaWine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./views/chinaWine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], resolve)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>此方法会把<code>原本打包到一个app.js文件分开成多个js文件</code>打包，这样会减小单个文件的大小，但是不会减小整个js文件夹的大小。 通过这种方式可以做到按需加载，只加载单个页面的js文件。</p><ul><li>打包文件中去掉map文件</li></ul><p>打包的app.js过大，另外还有一些生成的map文件。先将多余的map文件去掉，</p><p>找到config文件夹下index.js文件,把这个build里面的productionSourceMap改成false即可</p><ul><li>CDN引入第三方库 在项目开发中，我们会用到很多第三方库，如果可以按需引入，我们可以只引入自己需要的组件，来减少所占空间， 但也会有一些不能按需引入，我们可以采用CDN外部加载，在index.html中从CDN引入组件，去掉其他页面的组件import，修改webpack.base.config.js，在externals中加入该组件，这是为了避免编译时找不到组件报错。</li><li><code>gzip打包</code> gizp压缩是一种http请求优化方式，通过减少文件体积来提高加载速度。html、js、css文件甚至json数据都可以用它压缩，可以减小60%以上的体积。 <ul><li><code>npm i -D compression-webpack-plugin</code></li><li>在vue.config.js中配置</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CompressionPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;compression-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompressionPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10240</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                deleteOriginalAssets: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            })]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>在NGINX中配置(nginx -s reload ：修改配置后重新加载生效)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        http {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gzip  on;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gzip_min_length    1k;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gzip_buffers        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 8k;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gzip_http_version  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gzip_comp_level    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gzip_proxied        any;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gzip_types          application</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">javascript text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">css image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gif;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gzip_vary          on;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gzip_disable        </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MSIE [1-6]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        #以下的配置省略</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li>终极大招，预渲染 <ul><li><code>cnpm install prerender-spa-plugin --save-dev</code></li><li>vue.config.js</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PrerenderSPAPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prerender-spa-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Renderer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PrerenderSPAPlugin.PuppeteerRenderer;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在plugins下面，找到plugins对象，直接加到上面就行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 预渲染配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrerenderSPAPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //要求-给的WebPack-输出应用程序的路径预渲染。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    staticDir: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //必需，要渲染的路线。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    routes: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //必须，要使用的实际渲染器，没有则不能预编译</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    renderer: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Renderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        inject: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        headless: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//渲染时显示浏览器窗口。对调试很有用。  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //等待渲染，直到检测到指定元素。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //例如，在项目入口使用\`document.dispatchEvent(new Event(&#39;custom-render-trigger&#39;))\` </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        renderAfterDocumentEvent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;render-event&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>router.js: 需要把vue的router模式设置成history模式</li><li>在创建vue实例的mounted里面加一个事件，跟PrerenderSPAPlugin实例里面的renderAfterDocumentEvent对应上。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatchEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;render-event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div></li><li>优化代码：确保你的代码是高效的，避免不必要的计算和操作，尽量减少网络请求和资源加载。</li><li><code>懒加载</code>：使用懒加载技术，将页面上的一些资源延迟加载，只在需要时再加载，可以提高初始加载速度。</li><li><code>代码分割</code>：将代码分割成多个小块，按需加载，这样可以减少初始加载的文件大小，加快页面加载速度。</li><li><code>图片优化</code>：对于图片资源，可以使用合适的压缩算法和格式，减小图片文件的大小，提高加载速度。</li><li><code>CDN 加速</code>：使用内容分发网络（CDN）来加速静态资源的加载，将资源分发到全球各地的服务器，减少网络延迟。</li><li><code>缓存策略</code>：合理设置缓存策略，利用浏览器缓存和服务器缓存，减少重复加载资源的次数。</li><li><code>服务器性能优化</code>：确保服务器的性能良好，可以考虑使用缓存、压缩、并发处理等技术来提高服务器的响应速度。</li></ul><h1 id="vuex" tabindex="-1">vuex <a class="header-anchor" href="#vuex" aria-label="Permalink to &quot;vuex&quot;">​</a></h1><h2 id="说一下对vuex的理解" tabindex="-1">说一下对vuex的理解？ <a class="header-anchor" href="#说一下对vuex的理解" aria-label="Permalink to &quot;说一下对vuex的理解？&quot;">​</a></h2><p>五种状态：</p><ul><li>state: 存储公共数据 this.$store.state</li><li>mutations：同步操作，改变store的数据 this.$store.commit()</li><li>actions: 异步操作，让mutations中的方法能在异步操作中起作用 this.$store.dispatch()</li><li>getters: 计算属性 this.$store.getters</li><li>modules: 子模块</li></ul><p>使用场景：</p><p>用户信息、菜单信息、购物车信息</p><p>解决vuex页面刷新数据丢失问题的方式：</p><ul><li>将vuex中的数据直接保存到浏览器缓存中（sessionStorage、localStorage、cookie）</li><li>在页面刷新的时候再次请求远程数据，使之动态更新vuex数据</li></ul>`,115),t=[e];function h(p,k,E,d,r,o){return i(),a("div",null,t)}const y=s(l,[["render",h]]);export{c as __pageData,y as default};
