import{_ as e,o as i,c as s,R as a}from"./chunks/framework.vB1haF5z.js";const u=JSON.parse('{"title":"Webpack","description":"","frontmatter":{},"headers":[],"relativePath":"webpack.md","filePath":"webpack.md"}'),l={name:"webpack.md"},d=a(`<h1 id="webpack" tabindex="-1"><a href="https://juejin.cn/post/6844904094281236487" target="_blank" rel="noreferrer">Webpack</a> <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;[Webpack](https://juejin.cn/post/6844904094281236487)&quot;">​</a></h1><h2 id="_0-对webpack的理解" tabindex="-1">0. 对webpack的理解 <a class="header-anchor" href="#_0-对webpack的理解" aria-label="Permalink to &quot;0. 对webpack的理解&quot;">​</a></h2><p>webpack是一个<code>前端打包器</code>，帮助开发者将<code>js模块</code>（各种类型的模块化规范）打包成一个或多个js脚本。webpack的工作过程可以分为<code>依赖解析过程</code>和<code>代码打包过程</code>，首先执行对应的<code>build</code>命令，webpack首先分析<code>入口文件</code>，<code>会递归解析AST获取对应依赖</code>，得到一个<code>依赖图</code>。然后为每一个模块添加<code>包裹函数</code>（webpack的模块化），从<code>入口文件为起点</code>，<code>递归执行模块</code>，进行拼接<code>IIFE</code>（立即调用函数表达式：保证了模块变量不会影响全局作用域），产出对应的<code>bundle</code>。</p><h2 id="_1-有哪些常见的loader-你用过哪些loader" tabindex="-1">1. 有哪些常见的Loader？你用过哪些Loader？ <a class="header-anchor" href="#_1-有哪些常见的loader-你用过哪些loader" aria-label="Permalink to &quot;1. 有哪些常见的Loader？你用过哪些Loader？&quot;">​</a></h2><ul><li><code>raw-loader</code>：加载文件原始内容（<code>utf-8</code>）</li><li><code>file-loader</code>：把文件输出到一个文件夹中，在代码中通过相对 <code>URL</code> 去引用输出的文件 (处理图片和字体)</li><li><code>url-loader</code>：与 <code>file-loader</code> 类似，区别是用户可以设置一个阈值，大于阈值会交给 <code>file-loader</code> 处理，小于阈值时返回文件 <code>base64</code> 形式编码 (处理图片和字体)</li><li><code>source-map-loader</code>：加载额外的 <code>Source Map</code> 文件，以方便断点调试</li><li><code>svg-inline-loader</code>：将压缩后的 <code>SVG</code> 内容注入代码中</li><li><code>image-loader</code>：加载并且压缩图片文件</li><li><code>json-loader</code> 加载 <code>JSON</code> 文件（默认包含）</li><li><code>handlebars-loader</code>: 将 <code>Handlebars</code> 模版编译成函数并返回</li><li><code>babel-loader</code>：把 <code>ES6</code> 转换成 <code>ES5</code></li><li><code>ts-loader</code>: 将 <code>TypeScript</code> 转换成 <code>JavaScript</code></li><li><code>awesome-typescript-loader</code>：将 <code>TypeScript</code> 转换成 <code>JavaScript</code>，性能优于 <code>ts-loader</code></li><li><code>sass-loader</code>：将<code>SCSS/SASS</code>代码转换成<code>CSS</code></li><li><code>css-loader</code>：加载 <code>CSS</code>，支持模块化、压缩、文件导入等特性</li><li><code>style-loader</code>：把 <code>CSS</code> 代码注入到 <code>JavaScript</code> 中，通过 <code>DOM</code> 操作去加载 <code>CSS</code></li><li><code>postcss-loader</code>：扩展 <code>CSS</code> 语法，使用下一代 <code>CSS</code>，可以配合 <code>autoprefixer</code> 插件自动补齐 <code>CSS3</code> 前缀</li><li><code>eslint-loader</code>：通过 <code>ESLint</code> 检查 <code>JavaScript</code> 代码</li><li><code>tslint-loader</code>：通过 <code>TSLint</code>检查 <code>TypeScript</code> 代码</li><li><code>mocha-loader</code>：加载 <code>Mocha</code> 测试用例的代码</li><li><code>coverjs-loader</code>：计算测试的覆盖率</li><li><code>vue-loader</code>：加载 <code>Vue.js</code> 单文件组件</li><li><code>i18n-loader</code>: 国际化</li><li><code>cache-loader</code>: 可以在一些性能开销较大的 <code>Loader</code> 之前添加，目的是将结果缓存到磁盘里</li></ul><h2 id="_2-有哪些常见的plugin-你用过哪些plugin" tabindex="-1">2. 有哪些常见的Plugin？你用过哪些Plugin？ <a class="header-anchor" href="#_2-有哪些常见的plugin-你用过哪些plugin" aria-label="Permalink to &quot;2. 有哪些常见的Plugin？你用过哪些Plugin？&quot;">​</a></h2><ul><li><code>define-plugin</code>：定义环境变量 (<code>Webpack4</code> 之后指定 <code>mode</code> 会自动配置)</li><li><code>ignore-plugin</code>：忽略部分文件</li><li><code>html-webpack-plugin</code>：简化 <code>HTML</code> 文件创建 (依赖于 <code>html-loader</code>)</li><li><code>web-webpack-plugin</code>：可方便地为单页应用输出 <code>HTML</code>，比 <code>html-webpack-plugin</code> 好用</li><li><code>uglifyjs-webpack-plugin</code>：不支持 <code>ES6</code> 压缩 (<code>Webpack4</code> 以前)</li><li><code>terser-webpack-plugin</code>: 支持压缩 <code>ES6</code> (<code>Webpack4</code>)</li><li><code>webpack-parallel-uglify-plugin</code>: 多进程执行代码压缩，提升构建速度</li><li><code>mini-css-extract-plugin</code>: 分离样式文件，<code>CSS</code> 提取为独立文件，支持按需加载 (替代<code>extract-text-webpack-plugin</code>)</li><li><code>serviceworker-webpack-plugin</code>：为网页应用增加离线缓存功能</li><li><code>clean-webpack-plugin</code>: 目录清理</li><li><code>ModuleConcatenationPlugin</code>: 开启 <code>Scope Hoisting</code></li><li><code>speed-measure-webpack-plugin</code>: 可以看到每个 <code>Loader</code> 和 <code>Plugin</code> 执行耗时 (整个打包耗时、每个 <code>Plugin</code> 和 <code>Loader</code> 耗时)</li><li><code>webpack-bundle-analyzer</code>: 可视化 <code>Webpack</code> 输出文件的体积 (业务组件、依赖第三方模块)</li></ul><h2 id="_3-那你再说一说loader和plugin的区别" tabindex="-1">3. 那你再说一说Loader和Plugin的区别？ <a class="header-anchor" href="#_3-那你再说一说loader和plugin的区别" aria-label="Permalink to &quot;3. 那你再说一说Loader和Plugin的区别？&quot;">​</a></h2><p><code>Loader</code> 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。</p><p>因为 <code>Webpack</code> 只认识 <code>JavaScript</code>，所以 <code>Loader</code> 就成了翻译官，对其他类型的资源进行转译的预处理工作。</p><p><code>Plugin</code> 就是插件，基于事件流框架 <code>Tapable</code>，插件可以扩展 <code>Webpack</code> 的功能，在 <code>Webpack</code> 运行的生命周期中会广播出许多事件，<code>Plugin</code> 可以监听这些事件，在合适的时机通过 <code>Webpack</code> 提供的 <code>API</code> 改变输出结果。</p><p><code>Loader</code> 在 <code>module.rules</code> 中配置，作为模块的解析规则，类型为数组。每一项都是一个 <code>Object</code>，内部包含了 <code>test</code>(类型文件)、<code>loader</code>、<code>options</code> (参数)等属性。</p><p><code>Plugin</code> 在 <code>plugins</code> 中单独配置，类型为数组，每一项是一个 <code>Plugin</code> 的实例，参数都通过构造函数传入。</p><p>执行顺序：两者不存在明显的先后顺序，不过<code>webpack在初始化处理</code>时，会优先识别到<code>plugin</code>中的内容。</p><h2 id="_4-webpack构建流程简单说一下" tabindex="-1">4. Webpack构建流程简单说一下 <a class="header-anchor" href="#_4-webpack构建流程简单说一下" aria-label="Permalink to &quot;4. Webpack构建流程简单说一下&quot;">​</a></h2><p><code>Webpack</code> 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p><ul><li><code>初始化参数</code>：从配置文件和 <code>Shell</code> 语句中读取与合并参数，得出最终的参数</li><li><code>开始编译</code>：用上一步得到的参数初始化 <code>Compiler</code> 对象，加载所有配置的插件，执行对象的 <code>run</code> 方法开始执行编译</li><li><code>确定入口</code>：根据配置中的 <code>entry</code> 找出所有的入口文件</li><li><code>编译模块</code>：从入口文件出发，调用所有配置的 <code>Loader</code> 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li><code>完成模块编译</code>：在经过第4步使用 <code>Loader</code> 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li><li><code>输出资源</code>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 <code>Chunk</code>，再把每个 <code>Chunk</code> 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li><li><code>输出完成</code>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ul><p>在以上过程中，<code>Webpack</code> 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 <code>Webpack</code> 提供的 <code>API</code> 改变 <code>Webpack</code> 的运行结果。</p><p>简单说</p><ul><li><code>初始化</code>：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler</li><li><code>编译</code>：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li><li><code>输出</code>：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中</li></ul><p>对源码感兴趣的同学可以移步另一篇专栏从<a href="https://juejin.cn/post/6844904046294204429" target="_blank" rel="noreferrer">源码窥探Webpack4.x原理</a></p><h2 id="_5-使用webpack开发时-你用过哪些可以提高效率的插件" tabindex="-1">5. 使用webpack开发时，你用过哪些可以提高效率的插件？ <a class="header-anchor" href="#_5-使用webpack开发时-你用过哪些可以提高效率的插件" aria-label="Permalink to &quot;5. 使用webpack开发时，你用过哪些可以提高效率的插件？&quot;">​</a></h2><ul><li><code>webpack-dashboard</code>：可以更友好的展示相关打包信息。</li><li><code>webpack-merge</code>：提取公共配置，减少重复配置代码</li><li><code>speed-measure-webpack-plugin</code>：简称 <code>SMP</code>，分析出 <code>Webpack</code> 打包过程中 <code>Loader</code> 和 <code>Plugin</code> 的耗时，有助于找到构建过程中的性能瓶颈。</li><li><code>size-plugin</code>：监控资源体积变化，尽早发现问题</li><li><code>HotModuleReplacementPlugin</code>：模块热替换</li></ul><h2 id="_6-source-map是什么-生产环境怎么用" tabindex="-1">6. source map是什么？生产环境怎么用？ <a class="header-anchor" href="#_6-source-map是什么-生产环境怎么用" aria-label="Permalink to &quot;6. source map是什么？生产环境怎么用？&quot;">​</a></h2><p><code>source map</code> 是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 <code>soucre map</code>。</p><p><code>map</code>文件只要不打开开发者工具，浏览器是不会加载的。</p><p>线上环境一般有三种处理方案：</p><ul><li><code>hidden-source-map</code>：借助第三方错误监控平台 <code>Sentry</code> 使用</li><li><code>nosources-source-map</code>：只会显示具体行数以及查看源代码的错误栈。安全性比 <code>sourcemap</code> 高</li><li><code>sourcemap</code>：通过 <code>nginx</code> 设置将 <code>.map</code> 文件只对白名单开放(公司内网)</li></ul><p>注意：避免在生产中使用 <code>inline-</code> 和 <code>eval-</code>，因为它们会增加 <code>bundle</code> 体积大小，并降低整体性能。</p><h2 id="_7-模块打包原理知道吗" tabindex="-1">7. 模块打包原理知道吗？ <a class="header-anchor" href="#_7-模块打包原理知道吗" aria-label="Permalink to &quot;7. 模块打包原理知道吗？&quot;">​</a></h2><p><code>Webpack</code> 实际上为每个模块创造了一个可以导出和导入的环境，本质上并没有修改 代码的执行逻辑，代码执行顺序与模块加载顺序也完全一致。</p><h2 id="_8-文件监听原理呢" tabindex="-1">8. 文件监听原理呢？ <a class="header-anchor" href="#_8-文件监听原理呢" aria-label="Permalink to &quot;8. 文件监听原理呢？&quot;">​</a></h2><p>在发现源码发生变化时，自动重新构建出新的输出文件。</p><p><code>Webpack</code>开启监听模式，有两种方式：</p><ul><li>启动 <code>webpack</code> 命令时，带上 <code>--watch</code> 参数</li><li>在配置 <code>webpack.config.js</code> 中设置 <code>watch:true</code></li></ul><p>缺点：每次需要手动刷新浏览器</p><p>原理：轮询判断文件的最后编辑时间是否变化，如果某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等 <code>aggregateTimeout</code> 后再执行。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.export </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 默认false,也就是不开启    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     watch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 只有开启监听模式时，watchOptions才有意义    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     watchOptions: {        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 默认为空，不监听的文件或者文件夹，支持正则匹配        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ignored:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 监听到变化发生后会等300ms再去执行，默认300ms        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        aggregateTimeout:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        poll:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_9-说一下-webpack-的热更新原理吧" tabindex="-1">9. 说一下 Webpack 的热更新原理吧 <a class="header-anchor" href="#_9-说一下-webpack-的热更新原理吧" aria-label="Permalink to &quot;9. 说一下 Webpack 的热更新原理吧&quot;">​</a></h2><p><code>Webpack</code> 的热更新又称热替换（<code>Hot Module Replacement</code>），缩写为 <code>HMR</code>。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p><p><code>HMR</code>的核心就是客户端从服务端拉去更新后的文件，准确的说是 <code>chunk diff</code> (<code>chunk</code> 需要更新的部分)，实际上 <code>WDS</code> 与浏览器之间维护了一个 <code>Websocket</code>，当本地资源发生变化时，<code>WDS</code> 会向浏览器推送更新，并带上构建时的 <code>hash</code>，让客户端与上一次资源进行对比。客户端对比出差异后会向 <code>WDS</code> 发起 <code>Ajax</code> 请求来获取更改内容(文件列表、<code>hash</code>)，这样客户端就可以再借助这些信息继续向 <code>WDS</code> 发起 <code>jsonp</code> 请求获取该c<code>hunk</code>的增量更新。</p><p>后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 <code>HotModulePlugin</code> 来完成，提供了相关 <code>API</code> 以供开发者针对自身场景进行处理，像<code>react-hot-loader</code> 和 <code>vue-loader </code>都是借助这些 <code>API</code> 实现 <code>HMR</code>。</p><p>细节请参考<a href="https://zhuanlan.zhihu.com/p/30669007" target="_blank" rel="noreferrer">Webpack HMR 原理解析</a></p><h2 id="_10-如何对bundle体积进行监控和分析" tabindex="-1">10. 如何对bundle体积进行监控和分析？ <a class="header-anchor" href="#_10-如何对bundle体积进行监控和分析" aria-label="Permalink to &quot;10. 如何对bundle体积进行监控和分析？&quot;">​</a></h2><p><code>VSCode</code> 中有一个插件 <code>Import Cost</code> 可以帮助我们对引入模块的大小进行实时监测，还可以使用 <code>webpack-bundle-analyzer</code> 生成 <code>bundle</code> 的模块组成图，显示所占体积。 <code>bundlesize</code> 工具包可以进行自动化资源体积监控。</p><h2 id="_11-文件指纹是什么-怎么用" tabindex="-1">11. 文件指纹是什么？怎么用？ <a class="header-anchor" href="#_11-文件指纹是什么-怎么用" aria-label="Permalink to &quot;11. 文件指纹是什么？怎么用？&quot;">​</a></h2><p>文件指纹是打包后输出的文件名的后缀。</p><ul><li><code>Hash</code>：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 <code>hash</code> 值就会更改</li><li><code>Chunkhash</code>：和 <code>Webpack</code> 打包的 <code>chunk</code> 有关，不同的 <code>entry</code> 会生出不同的 <code>chunkhash</code></li><li><code>Contenthash</code>：根据文件内容来定义 <code>hash</code>，文件内容不变，则 <code>contenthash</code> 不变</li></ul><h2 id="js的文件指纹设置" tabindex="-1">JS的文件指纹设置 <a class="header-anchor" href="#js的文件指纹设置" aria-label="Permalink to &quot;JS的文件指纹设置&quot;">​</a></h2><p>设置 <code>output</code> 的 <code>filename</code>，用 <code>chunkhash</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: {        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        app: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./scr/app.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        search: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/search.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: {        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name][chunkhash:8].js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path:__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="css的文件指纹设置" tabindex="-1">CSS的文件指纹设置 <a class="header-anchor" href="#css的文件指纹设置" aria-label="Permalink to &quot;CSS的文件指纹设置&quot;">​</a></h2><p>设置 <code>MiniCssExtractPlugin</code> 的 <code>filename</code>，使用 <code>contenthash</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: {        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        app: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./scr/app.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        search: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/search.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: {        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name][chunkhash:8].js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path:__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins:[        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MiniCssExtractPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({            filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[name][contenthash:8].css\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="图片的文件指纹设置" tabindex="-1">图片的文件指纹设置 <a class="header-anchor" href="#图片的文件指纹设置" aria-label="Permalink to &quot;图片的文件指纹设置&quot;">​</a></h2><p>设置<code>file-loader</code>的<code>name</code>，使用<code>hash</code>。</p><p>占位符名称及含义</p><ul><li><code>ext</code> 资源后缀名</li><li><code>name</code> 文件名称</li><li><code>path</code> 文件的相对路径</li><li><code>folder</code> 文件所在的文件夹</li><li><code>contenthash</code> 文件的内容hash，默认是md5生成</li><li><code>hash</code> 文件内容的hash，默认是md5生成</li><li><code>emoji</code> 一个随机的指代文件内容的emoj</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: {        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filename:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path:path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    module:{        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rules:[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {            </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jpg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">gif)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,            </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                use:[{                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    loader:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    options:{                    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;img/[name][hash:8].[ext]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }            </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }]        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_12-在实际工程中-配置文件上百行乃是常事-如何保证各个loader按照预想方式工作" tabindex="-1">12. 在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？ <a class="header-anchor" href="#_12-在实际工程中-配置文件上百行乃是常事-如何保证各个loader按照预想方式工作" aria-label="Permalink to &quot;12. 在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？&quot;">​</a></h2><p>可以使用 <code>enforce</code> 强制执行 <code>loader</code> 的作用顺序，<code>pre</code> 代表在所有正常 <code>loader</code> 之前执行，<code>post</code> 是所有 <code>loader</code> 之后执行。(<code>inline</code> 官方不推荐使用)</p><h2 id="_13-如何优化-webpack-的构建速度" tabindex="-1">13. 如何优化 Webpack 的构建速度？ <a class="header-anchor" href="#_13-如何优化-webpack-的构建速度" aria-label="Permalink to &quot;13. 如何优化 Webpack 的构建速度？&quot;">​</a></h2><p>简单记：</p><ul><li>基于esm的tree shaking</li><li>对balel设置缓存，缩小babel-loader的处理范围,及精准指定要处理的目录。</li><li>压缩资源（mini-css-extract-plugin，compression-webpack-plugin）</li><li>配置资源的按需引入（第三方组件库）</li><li>配置splitChunks来进行按需加载（根据）</li><li>设置CDN优化</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        exclude:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        include: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader?cacheDirectory&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>(这个问题就像能不能说一说**「从URL输入到页面显示发生了什么」**一样）</p><ul><li>使用<code>高版本</code>的 Webpack 和 Node.js</li><li><code>多进程/多实例构建</code>：HappyPack(不维护了)、<code>thread-loader</code></li><li><code>压缩代码</code><ul><li><code>多进程并行压缩</code><ul><li><code>webpack-paralle-uglify-plugin</code></li><li><code>uglifyjs-webpack-plugin</code> 开启 <code>parallel</code> 参数 (不支持ES6)</li><li><code>terser-webpack-plugin</code> 开启 <code>parallel</code> 参数</li></ul></li><li>通过 <code>mini-css-extract-plugin</code> 提取 <code>Chunk</code> 中的 <code>CSS</code> 代码到单独文件，通过 <code>css-loader</code> 的 <code>minimize</code> 选项开启 <code>cssnano</code> 压缩 <code>CSS</code>。</li></ul></li><li><code>图片压缩</code><ul><li>使用基于 <code>Node</code> 库的 <code>imagemin</code> (很多定制选项、可以处理多种图片格式)</li><li>配置 <code>image-webpack-loader</code></li></ul></li><li><code>缩小打包作用域</code><ul><li><code>exclude/include</code> (确定 <code>loader</code> 规则范围)</li><li><code>resolve.modules</code> 指明第三方模块的绝对路径 (减少不必要的查找)</li><li><code>resolve.mainFields</code> 只采用 <code>main</code> 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段)- <code>resolve.extensions</code> 尽可能减少后缀尝试的可能性</li><li><code>noParse</code> 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 <code>import、require、define</code> 等模块化语句)</li><li><code>IgnorePlugin</code> (完全排除模块)</li><li><code>合理使用alias</code></li></ul></li><li><code>提取页面公共资源</code><ul><li>基础包分离 <ul><li>使用 <code>html-webpack-externals-plugin</code>，将基础包通过 <code>CDN</code> 引入，不打入 <code>bundle</code> 中</li><li>使用 <code>SplitChunksPlugin</code> 进行(公共脚本、基础包、页面公共文件)分离(Webpack4内置) ，替代了 <code>CommonsChunkPlugin</code> 插件</li></ul></li></ul></li><li><code>DLL</code><ul><li>使用 <code>DllPlugin</code> 进行分包，使用 <code>DllReferencePlugin</code>(索引链接) 对 <code>manifest.json</code> 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。</li><li><code>HashedModuleIdsPlugin</code> 可以解决模块数字id问题</li></ul></li><li><code>充分利用缓存提升二次构建速度</code><ul><li><code>babel-loader</code> 开启缓存</li><li><code>terser-webpack-plugin</code> 开启缓存</li><li>使用 <code>cache-loader</code> 或者 <code>hard-source-webpack-plugin</code></li></ul></li><li><code>Tree shaking</code><ul><li>打包过程中检测工程中没有引用过的模块并进行标记，在资源压缩时将它们从最终的<code>bundle中去掉</code>(<code>只能对ES6 Modlue生效</code>) 开发中尽可能使用<code>ES6 Module</code>的模块，提高<code>tree shaking</code>效率</li><li>禁用 <code>babel-loader</code> 的模块依赖解析，否则<code> Webpack</code> 接收到的就都是转换过的 <code>CommonJS</code> 形式的模块，无法进行 <code>tree-shaking</code></li><li>使用 <code>PurifyCSS</code>(不在维护) 或者 <code>uncss</code> 去除无用 CSS 代码 <ul><li><code>purgecss-webpack-plugin</code> 和 <code>mini-css-extract-plugin</code>配合使用(建议)</li></ul></li></ul></li><li><code>Scope hoisting</code><ul><li>构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销变大。Scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突</li><li>必须是ES6的语法，因为有很多第三方库仍采用 CommonJS 语法，为了充分发挥 Scope hoisting 的作用，需要配置 mainFields 对第三方模块优先采用 jsnext:main 中指向的ES6模块化语法</li></ul></li><li><code>动态Polyfill</code><ul><li>建议采用 <code>polyfill-service</code> 只给用户返回需要的polyfill，社区维护。 (部分国内奇葩浏览器UA可能无法识别，但可以降级返回所需全部polyfill)</li></ul></li></ul><p>更多优化请参考<a href="https://www.webpackjs.com/guides/build-performance/" target="_blank" rel="noreferrer">官网-构建性能</a></p><h2 id="_14-你刚才也提到了代码分割-那代码分割的本质是什么-有什么意义呢" tabindex="-1">14. 你刚才也提到了代码分割，那代码分割的本质是什么？有什么意义呢？ <a class="header-anchor" href="#_14-你刚才也提到了代码分割-那代码分割的本质是什么-有什么意义呢" aria-label="Permalink to &quot;14. 你刚才也提到了代码分割，那代码分割的本质是什么？有什么意义呢？&quot;">​</a></h2><p>代码分割的本质其实就是在<code>源代码直接上线</code>和<code>打包成唯一脚本main.bundle.js</code>这两种极端方案之间的一种更适合实际场景的中间状态。</p><p><strong>「用可接受的服务器性能压力增加来换取更好的用户体验。」</strong></p><p>源代码直接上线：虽然过程可控，但是http请求多，性能开销大。</p><p>打包成唯一脚本：一把梭完自己爽，服务器压力小，但是页面空白期长，用户体验不好。</p><h2 id="_15-是否写过loader-简单描述一下编写loader的思路" tabindex="-1">15. 是否写过Loader？简单描述一下编写loader的思路？ <a class="header-anchor" href="#_15-是否写过loader-简单描述一下编写loader的思路" aria-label="Permalink to &quot;15. 是否写过Loader？简单描述一下编写loader的思路？&quot;">​</a></h2><p>Loader 支持链式调用，所以开发上需要严格遵循“单一职责”，每个 Loader 只负责自己需要负责的事情。</p><p><a href="https://www.webpackjs.com/api/loaders/" target="_blank" rel="noreferrer">Loader的API</a> 可以去官网查阅</p><ul><li>Loader 运行在 Node.js 中，我们可以调用任意 Node.js 自带的 API 或者安装第三方模块进行调用</li><li>Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串，当某些场景下 Loader 处理二进制文件时，需要通过 exports.raw = true 告诉 Webpack 该 Loader 是否需要二进制数据</li><li>尽可能的异步化 Loader，如果计算量很小，同步也可以</li><li>Loader 是无状态的，我们不应该在 Loader 中保留状态</li><li>使用 loader-utils 和 schema-utils 为我们提供的实用工具</li><li>加载本地 Loader 方法 <ul><li>Npm link</li><li>ResolveLoader</li></ul></li></ul><h2 id="_16-是否写过plugin-简单描述一下编写plugin的思路" tabindex="-1">16. 是否写过Plugin？简单描述一下编写Plugin的思路？ <a class="header-anchor" href="#_16-是否写过plugin-简单描述一下编写plugin的思路" aria-label="Permalink to &quot;16. 是否写过Plugin？简单描述一下编写Plugin的思路？&quot;">​</a></h2><p>webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在特定的阶段钩入想要添加的自定义功能。Webpack 的 Tapable 事件流机制保证了插件的有序性，使得整个系统扩展性良好。</p><p><a href="https://www.webpackjs.com/api/plugins/" target="_blank" rel="noreferrer">Plugin的API</a> 可以去官网查阅</p><ul><li>compiler 暴露了和 Webpack 整个生命周期相关的钩子</li><li>compilation 暴露了与模块和依赖有关的粒度更小的事件钩子</li><li>插件需要在其原型上绑定apply方法，才能访问 compiler 实例</li><li>传给每个插件的 compiler 和 compilation对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件</li><li>找出合适的事件点去完成想要的功能 <ul><li>emit 事件发生时，可以读取到最终输出的资源、代码块、模块及其依赖，并进行修改(emit 事件是修改 Webpack 输出资源的最后时机)</li><li>watch-run 当依赖的文件发生变化时会触发</li></ul></li><li>异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住</li></ul><h2 id="_17-聊一聊babel原理吧" tabindex="-1">17. 聊一聊Babel原理吧 <a class="header-anchor" href="#_17-聊一聊babel原理吧" aria-label="Permalink to &quot;17. 聊一聊Babel原理吧&quot;">​</a></h2><p>大多数JavaScript Parser遵循 <code>estree</code> 规范，Babel 最初基于 <code>acorn</code> 项目(<code>轻量级现代 JavaScript 解析器</code>) Babel大概分为三大部分：</p><ul><li>解析：将代码转换成 AST <ul><li>词法分析：将代码(字符串)分割为token流，即语法单元成的数组</li><li>语法分析：分析token流(上面生成的数组)并生成 AST</li></ul></li><li>转换：访问 AST 的节点进行变换操作生产新的 AST <ul><li><a href="https://github.com/NervJS/taro/tree/1.x" target="_blank" rel="noreferrer">Taro</a>就是利用 babel 完成的小程序语法转换</li></ul></li><li>生成：以新的 AST 为基础生成代码</li></ul><p>简单记：</p><p><code>babel</code>是一个工具链，主要用于将<code>ES2015+</code>代码转换为当前和旧浏览器或环境<code>中向后兼容的Js版本</code>。这句话比较官方，其实<code>babel</code>就是一个<code>语法转换工具链</code>，它会将我们书写的代码（<code>vue或react）</code>通过相关的解析（<code>对应的Preset）</code>，主要是<code>词法解析</code>和<code>语法解析</code>，通过<code>babel-parser</code>转换成对应的<code>AST树</code>，再对得到的抽象语法树根据相关的<code>规则配置</code>，转换成最终需要的<code>目标平台识别的AST树</code>，再得到目标代码。</p><p>在日程的<code>Webpack</code>使用主要有三个插件：<code>babel-loader、babel-core、babel-preset-env。</code><code>babel</code>本质上会运行<code>babel-loader</code>一个函数，在运行时会匹配到对应的文件，根据<code>babel.config.js</code>（.balelrc）的配置（这里会配置相关的<code>babel-preset-env</code>,它会告诉babel用什么规则去进行代码转换）去将代码进行一个解析和转换（转换依靠的是<code>babel-core</code>），最终得到目标平台的代码。</p>`,87),o=[d];function c(n,p,h,t,k,r){return i(),s("div",null,o)}const g=e(l,[["render",c]]);export{u as __pageData,g as default};
